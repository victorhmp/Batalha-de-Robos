#!/usr/bin/env python3
import pygame as pg
import fileinput

from math import *

pg.init()                                 # inicialização do sistema
pg.font.init()

myfont = pg.font.SysFont('Helvetica', 10)

cristal_source = "visual/cristal.png"

# altura e largura da arena, em células
H, W = 12,12

# largura da célula
l = 30
# altura da célula
L = 2*l/sqrt(3)

# hp inicial dos robôs
robHP = 100

# cria a janela
scr = pg.display.set_mode((2*W*l+l,int(1.5*L*H+L/2)))
# só para simplificar, atualização da imagem
atu = pg.display.update


# pinta o fundo da janela
scr.fill((0,200,0))
atu()

def convert(i ,j):
    """
    Converte a coordenada (i,j) para a posição em pixels na janela
    """
    x = (1 + i%2)*l + 2*j*l
    y = 1.5*i*L + L
    return x,y

class Robô(pg.sprite.Sprite):
    """
    Representa um Robô, possui uma imagem
    """
    def __init__(s, img, robIndex):
        """
        Construtor, img é o nome do arquivo com a imagem
        """
        pg.sprite.Sprite.__init__(s)
        s.image = pg.image.load(img)
        s.rect = s.image.get_rect()

    def draw(s, i,j, hp):
        """
        Desenha o robô na célula (i,j) com seu hp
        """
        x, y = convert(i,j)

        # fronteiras do sprite
        l0,h0,l1,h1 = s.rect

        # corrije a posição de acordo com o tamanho do sprite
        s.rect.topleft = [x-l1/2,y-h1/2]
        # desenha
        scr.blit(s.image, s.rect)

        # coloca vida do robo
        #text_hp = myfont.render(str(hp), True, (22, 204, 49)) Tom de verde claro
        text_hp = myfont.render(str(hp), True, (0, 0, 0)) # preto
        s.rect.topleft = [x-l1/(3.5),y+h1/2] # alinhamento centralizado em baixo do robô
        scr.blit(text_hp, s.rect)

class Base(pg.sprite.Sprite):
    """
    Representa uma base, possui uma imagem
    """
    def __init__(s, img, pos_i, pos_j):
        """
        Construtor, img é o nome do arquivo com a imagem
        """
        pg.sprite.Sprite.__init__(s)
        s.image = pg.image.load(img)
        s.rect = s.image.get_rect()
        s.i = pos_i
        s.j = pos_j

    def draw(s):
        """
        Desenha a base na célula (i,j)
        """
        x, y = convert(s.i,s.j)

        # fronteiras do sprite
        l0,h0,l1,h1 = s.rect

        # corrije a posição de acordo com o tamanho do sprite
        s.rect.topleft = [x-l1/2,y-h1/2]
        # desenha
        scr.blit(s.image, s.rect)

class Cristal(pg.sprite.Sprite):
    """
    Representa um cristal, possui uma imagem
    """
    def __init__(s, img, num):
        """
        Construtor, img é o nome do arquivo com a imagem
        """
        pg.sprite.Sprite.__init__(s)
        s.image = pg.image.load(img)
        s.rect = s.image.get_rect()
        s.num = num

    def draw(s, i, j):
        """
        Desenha o cristal na célula (i,j)
        """
        x, y = convert(i,j)

        # fronteiras do sprite
        l0,h0,l1,h1 = s.rect

        # corrije a posição de acordo com o tamanho do sprite
        s.rect.topleft = [x-l1/2,y-h1/2]
        # desenha
        scr.blit(s.image, s.rect)

        text_cristals = myfont.render(str(s.num), True, (0, 0, 0)) # preto
        s.rect.topleft = [x-l1/(3.5),y+h1/2] # alinhamento centralizado em baixo do robô
        scr.blit(text_cristals, s.rect)


class cell:
    """
    Representa uma das células da arena
    """
    def __init__(s,i,j):
        """
        Construtor, i e j formam a coordenada
        """
        # Posição do centro
        s.cx, s.cy = convert(i,j)
        # Cor (pode ser passada para o construtor no futuro)
        s.cor = (208, 255, 0)

        # Vértices do hexágono
        s.pontos = (
            (s.cx,   s.cy-L),
            (s.cx+l, s.cy-L/2),
            (s.cx+l, s.cy+L/2),
            (s.cx,   s.cy+L),
            (s.cx-l, s.cy+L/2),
            (s.cx-l, s.cy-L/2),
            )

    def draw(s) :
        """
        Desenha a célula
        """
        pg.draw.polygon(scr, s.cor, s.pontos, 0)
        pg.draw.lines(scr, (0,0,0), True, s.pontos, 2)


# Construção da matriz que representa a arena
arena = []
for i in range(H):
    arena.append([])
    for j in range(W):
        arena[i].append(cell(i,j))
        arena[i][j].draw()

# lista dos robôs definidos e das bases
robs = []
baseLog = []

# atualiza a janela
atu()

# Leitura dos comandos pela entrada padrão ou de um arquivo
for line in fileinput.input():
    r = line.split()

    # linha começando com 'fim', termina o programa
    if r[0] == 'fim':
        break

    # linha começando com 'rob', inclui um robô,
    # o segundo argumento na linha é a imagem
    if r[0] == 'rob':
        robs.append(Robô(r[1], r[2]))
        robIndex, i, j = list(map(int, r[2:]))
        print("Criando robô %d na posição %d %d" %(robIndex, i, j))
        robs[robIndex].draw(i, j, robHP)
        atu()
        pg.time.wait(500)
        continue

    if r[0] == 'cel':
        cel_i, cel_j, r, g, b = list(map(int, r[1:]))
        arena[cel_i][cel_j].cor = (r, g, b)
        arena[cel_i][cel_j].draw()
        atu()
        continue

    if r[0] == 'cristal':
        pos_i, pos_j, cristais = list(map(int, r[1:]))
        print("%d cristais criado(s) em: %d %d" %(cristais, pos_i, pos_j))
        if(cristais > 0):
            Cristal(cristal_source, cristais).draw(pos_i,pos_j);
        atu();
        pg.time.wait(100)
        continue

    if r[0] == 'erase':
        i, j = list(map(int, r[1:]))
        arena[i][j].draw()
        atu()
        continue

    if r[0] == 'base':
        baseIndex, i, j = list(map(int, r[2:]))
        baseLog.append(Base(r[1], i, j))
        print("Base %d criada em %d %d" %(baseIndex, i, j))

        arena[i][j].draw()
        baseLog[baseIndex].draw()
        atu()
        continue

    # linha de movimentação:
    # robô, corrdenadas originais, coordenadas finais
    ri, oi, oj, di, dj, newHP = list(map(int, r))

    # redesenha a célula original (apaga o robô)
    if 0 <= oi  < W and 0 <= oj < H:
        arena[oi][oj].draw()
    # desenha o robô na célula de destino
    if 0 <= di  < W and 0 <= dj < H and ri < len(robs):
        robs[ri].draw(di,dj, newHP)
        pg.time.wait(500)

    # tempo de espera para atualização, apenas para testes
    pg.time.wait(100)

    atu()

#pg.quit()
# Local variables:
# mode: python
# End:
